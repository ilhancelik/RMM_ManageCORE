
// src/ai/flows/generate-script-flow.ts
'use server';
/**
 * @fileOverview This file defines a Genkit flow for generating scripts based on user descriptions.
 *
 * - generateScript - Takes a natural language description and a script type, and returns a generated script.
 * - GenerateScriptInput - The input type for the generateScript function.
 * - GenerateScriptOutput - The return type for the generateScript function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { ScriptType } from '@/types';


const GenerateScriptInputSchema = z.object({
  description: z
    .string()
    .describe('A natural language description of what the script should do.'),
  scriptType: z.custom<ScriptType>()
    .describe('The target type of the script (e.g., PowerShell, CMD, Python).'),
  context: z
    .string()
    .optional()
    .describe('Optional additional context about the environment or purpose (e.g., "Windows Server 2022 for system monitoring").'),
});
export type GenerateScriptInput = z.infer<typeof GenerateScriptInputSchema>;

const GenerateScriptOutputSchema = z.object({
  generatedScript: z
    .string()
    .describe('The script generated by the AI based on the input description and type.'),
  explanation: z
    .string()
    .optional()
    .describe('An optional explanation of how the generated script works or important considerations.'),
});
export type GenerateScriptOutput = z.infer<typeof GenerateScriptOutputSchema>;

export async function generateScript(input: GenerateScriptInput): Promise<GenerateScriptOutput> {
  return generateScriptFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateScriptPrompt',
  input: {schema: GenerateScriptInputSchema},
  output: {schema: GenerateScriptOutputSchema},
  prompt: `You are an expert system administrator and script developer. Your task is to generate a script based on the user's requirements.

Follow these instructions carefully:
1.  Analyze the user's **description** of what the script should accomplish.
2.  Generate a script in the specified **scriptType**.
3.  If **context** is provided, use it to tailor the script appropriately (e.g., for a specific OS or task).
4.  Prioritize security, efficiency, and best practices for the given script type.
5.  If the request is ambiguous or potentially harmful, try to generate a safe, simple script or ask for clarification in the explanation.
6.  Provide the generated script in the \`generatedScript\` field.
7.  Optionally, provide a brief explanation of how the script works or any important considerations in the \`explanation\` field. Ensure the explanation is concise.
8.  Do NOT include any markdown formatting (like \`\`\`powershell ... \`\`\`) around the generated script itself. Only provide the raw script code.

User's Script Description:
{{{description}}}

Target Script Type:
{{{scriptType}}}

{{#if context}}
Additional Context:
{{{context}}}
{{/if}}
`,
});

const generateScriptFlow = ai.defineFlow(
  {
    name: 'generateScriptFlow',
    inputSchema: GenerateScriptInputSchema,
    outputSchema: GenerateScriptOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
